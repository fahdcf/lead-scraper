{
  "name": "web scraper bot whatsapp",
  "nodes": [
    {
      "parameters": {},
      "id": "db8cfa3f-4800-4df6-8e93-a49e233da820",
      "name": "Remove Duplicate URLs",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        288,
        1088
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "221b34bc-2461-4707-b301-a3649604e1fe",
      "name": "Loop over queries",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        0,
        0
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/customsearch/v1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyDB34zBGAHN4S-RxBKqlAX7UxuyIMWE-iM"
            },
            {
              "name": "cx",
              "value": "4385aef0f424b4b5b"
            },
            {
              "name": "q",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": false
        }
      },
      "id": "0a42674c-cab6-455c-9610-0ea9103312c8",
      "name": "Search Google Maps with query",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -192,
        896
      ],
      "executeOnce": false,
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const results = $json.items || [];\n\nreturn results.map(result => {\n  return {\n    json: {\n      url: result.link\n    }\n  };\n});\n"
      },
      "id": "728fe36c-2565-49a3-99aa-fea015f4d20b",
      "name": "Scrape URLs from results",
      "type": "n8n-nodes-base.code",
      "position": [
        64,
        896
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "041797f2-2fe2-41dc-902a-d34050b9b304",
              "operator": {
                "type": "string",
                "operation": "notRegex"
              },
              "leftValue": "={{ $json.url }}",
              "rightValue": "=(google|gstatic|ggpht|schema\\.org|example\\.com|sentry-next\\.wixpress\\.com|imli\\.com|sentry\\.wixpress\\.com|ingest\\.sentry\\.io)"
            },
            {
              "id": "eb499a7e-17bc-453c-be08-a47286f726dd",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "9a2875bf-2243-4ec5-b0fc-0b6f223ccffc",
      "name": "Filter irrelevant URLs",
      "type": "n8n-nodes-base.filter",
      "position": [
        320,
        896
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "e8cd6922-79c3-418b-a8f9-bc12d9f60427",
      "name": "Request web page for URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1408,
        848
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "7486e50a-92c0-44e2-b673-21bf522ead7b",
      "name": "Loop over URLs",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1216,
        640
      ],
      "typeVersion": 3,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e170efbb-6c01-4d1b-9f98-e8b85935d718",
      "name": "Loop over pages",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        2064,
        784
      ],
      "typeVersion": 3,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const html = $json.data || \"\";\n\n// --- Extract Emails ---\nconst emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(?!png|jpg|gif|jpeg)[a-zA-Z]{2,}/gi;\nconst emails = html.match(emailRegex);\nconst uniqueEmails = emails ? [...new Set(emails)] : null;\n\n// --- Extract Moroccan Phone Numbers Only ---\nconst phoneRegex = /(?:(?:\\+212|0)(6|7)\\d{8})/g;\nconst phones = html.match(phoneRegex);\nconst uniquePhones = phones ? [...new Set(phones)] : null;\n\n// --- Return Result ---\nreturn {\n  json: {\n    page_data: {\n      emails: uniqueEmails,\n      phones: uniquePhones\n    }\n  }\n};\n"
      },
      "id": "3467d505-5f83-4baf-84c6-aeb59b373b3e",
      "name": "Scrape emails from page",
      "type": "n8n-nodes-base.code",
      "position": [
        2272,
        912
      ],
      "typeVersion": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "page_data"
            }
          ]
        },
        "options": {
          "mergeLists": true
        }
      },
      "id": "3518cd26-9da4-4089-893f-07f772d51499",
      "name": "Aggregate arrays of emails",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        1888,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldToSplitOut": "emails",
        "options": {}
      },
      "id": "c16c2cd8-697c-4301-8046-52b163aa03fb",
      "name": "Split out into default data structure",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        2192,
        576
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "emails",
        "options": {}
      },
      "id": "7b6b5864-5706-4a4c-af63-d6756749b064",
      "name": "Remove duplicate emails",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        2416,
        544
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "041797f2-2fe2-41dc-902a-d34050b9b304",
              "operator": {
                "type": "string",
                "operation": "notRegex"
              },
              "leftValue": "={{ $json.emails }}",
              "rightValue": "=(google|gstatic|ggpht|schema\\.org|example\\.com|sentry\\.wixpress\\.com|sentry-next\\.wixpress\\.com|ingest\\.sentry\\.io|sentry\\.io|imli\\.com)"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "736d4804-1b44-48be-bdc7-1fea69282a14",
      "name": "Filter irrelevant emails",
      "type": "n8n-nodes-base.filter",
      "position": [
        2640,
        608
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {},
      "id": "f4ff95cd-07a4-4d84-bb81-f199446f31d1",
      "name": "Run workflow",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -704,
        848
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "amount": 2
      },
      "id": "6eaf0b9d-076c-4e64-a185-4a51bce4a52c",
      "name": "Wait between executions",
      "type": "n8n-nodes-base.wait",
      "position": [
        624,
        32
      ],
      "webhookId": "40eb11a9-0f7d-4932-993e-0052b69dbf9b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "id": "c8b52ce3-cb4f-424e-9b12-bf5b79bb51ae",
      "name": "Execute scraper for query",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        304,
        80
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "binaryPropertyName": "email, phone",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2976,
        928
      ],
      "id": "77ab6996-bcc3-48a3-8b73-9fca1af43878",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -496,
        848
      ],
      "id": "7218ed41-ab7c-4c8f-abbe-1edb41673624",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const midpoint = Math.ceil(items.length / 2);\n\nreturn [{\n  json: {\n    firstHalf: items.slice(0, midpoint).map(item => item.json),\n    secondHalf: items.slice(midpoint).map(item => item.json),\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        720
      ],
      "id": "47b75ce4-190a-4d1a-8a13-bfabb6dea4b0",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Simply return all incoming items as they are\nreturn items.map(item => ({\n  json: {\n    data: item.json.data\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1824,
        1072
      ],
      "id": "d66b9ca0-ce40-4fef-aa67-5e6d4b96b5ee",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "const emailsSet = new Set();\nconst phonesSet = new Set();\n\nconst emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst phoneRegex = /^(?:\\+212|0)(6|7)\\d{8}$/;\n\n// Domains/keywords to exclude in emails\nconst excludedEmailPatterns = [\n  /@.*(google|gstatic|ggpht|schema\\.org|example\\.com|sentry\\.wixpress\\.com|sentry-next\\.wixp.*|ingest\\.sentry\\.io|sentry\\.io|imli\\.com)/i,\n  /reddit/i,\n  /wikipedia/i\n];\n\nfunction isValidEmail(email) {\n  if (!emailRegex.test(email)) return false;\n  return !excludedEmailPatterns.some(pattern => pattern.test(email));\n}\n\nfunction isValidPhone(phone) {\n  return phoneRegex.test(phone);\n}\n\nfor (const item of items) {\n  const pd = item.json.page_data;\n\n  if (Array.isArray(pd.emails)) {\n    pd.emails.forEach(e => {\n      if (isValidEmail(e)) emailsSet.add(e.toLowerCase());\n    });\n  }\n\n  if (Array.isArray(pd.phones)) {\n    pd.phones.forEach(p => {\n      if (isValidPhone(p)) phonesSet.add(p);\n    });\n  }\n}\n\n// Convert sets to arrays\nconst emailsArr = Array.from(emailsSet);\nconst phonesArr = Array.from(phonesSet);\n\nconst maxLen = Math.max(emailsArr.length, phonesArr.length);\nconst output = [];\n\nfor (let i = 0; i < maxLen; i++) {\n  output.push({\n    email: emailsArr[i] || \"\",\n    phone: phonesArr[i] || \"\"\n  });\n}\n\nreturn output.map(row => ({ json: row }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2528,
        832
      ],
      "id": "e9aded6d-ad89-4132-9d8b-28a4111502e3",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "a6ee2f3c-42f0-49f7-8b7e-742ceed95977",
      "name": "Request web page for URL1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1376,
        1296
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "bf1f6c3c-23ed-4898-8db6-28f5a3108c08",
      "name": "Loop over URLs1",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1104,
        1152
      ],
      "typeVersion": 3,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// The input is a single item with json.firstHalf array\nreturn items[0].json.firstHalf.map(urlItem => ({\n  json: urlItem\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        720
      ],
      "id": "e93b0e9e-de4a-40c6-abea-a88fc877ac8f",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// The input is a single item with json.secondHalf array\nreturn items[0].json.secondHalf.map(urlItem => ({\n  json: urlItem\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        1040
      ],
      "id": "8826a019-304c-4575-b5cd-dda3f0c5dc5f",
      "name": "Code4"
    }
  ],
  "pinData": {
    "Run workflow": [
      {
        "json": {
          "query": "dentiste+Casablanca"
        }
      },
      {
        "json": {
          "query": "clinique+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "meilleur+dentiste+Casablanca"
        }
      },
      {
        "json": {
          "query": "urgence+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "dentiste+esthétique+Casablanca"
        }
      },
      {
        "json": {
          "query": "dentiste+pédiatrique+Casablanca"
        }
      },
      {
        "json": {
          "query": "dentiste+pas+cher+Casablanca"
        }
      },
      {
        "json": {
          "query": "orthodontiste+Casablanca"
        }
      },
      {
        "json": {
          "query": "implant+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "dentiste+familial+Casablanca"
        }
      },
      {
        "json": {
          "query": "soins+dentaires+Casablanca"
        }
      },
      {
        "json": {
          "query": "prothèse+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "blanchiment+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "parodontologie+Casablanca"
        }
      },
      {
        "json": {
          "query": "chirurgie+dentaire+Casablanca"
        }
      },
      {
        "json": {
          "query": "dentiste+enfants+Casablanca"
        }
      },
      {
        "json": {
          "query": "consultation+dentaire+Casablanca"
        }
      }
    ]
  },
  "connections": {
    "Run workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over URLs": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Request web page for URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over pages": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Scrape emails from page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over queries": {
      "main": [
        [],
        [
          {
            "node": "Execute scraper for query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicate URLs": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter irrelevant URLs": {
      "main": [
        [
          {
            "node": "Remove Duplicate URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove duplicate emails": {
      "main": [
        [
          {
            "node": "Filter irrelevant emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape emails from page": {
      "main": [
        [
          {
            "node": "Loop over pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait between executions": {
      "main": [
        [
          {
            "node": "Loop over queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request web page for URL": {
      "main": [
        [
          {
            "node": "Loop over URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape URLs from results": {
      "main": [
        [
          {
            "node": "Filter irrelevant URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute scraper for query": {
      "main": [
        [
          {
            "node": "Wait between executions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate arrays of emails": {
      "main": [
        [
          {
            "node": "Split out into default data structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Google Maps with query": {
      "main": [
        [
          {
            "node": "Scrape URLs from results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split out into default data structure": {
      "main": [
        [
          {
            "node": "Remove duplicate emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Search Google Maps with query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop over pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request web page for URL1": {
      "main": [
        [
          {
            "node": "Loop over URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over URLs1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Request web page for URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Loop over URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Loop over URLs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8470b24e-8bab-4cb5-a14f-77b6a2903b82",
  "meta": {
    "instanceId": "7069bd96460addcb2208083b2fa85f57330c740f3cb4c51b18da3b78b19f5743"
  },
  "id": "cSpRctFnaesy57O5",
  "tags": []
}